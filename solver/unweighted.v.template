
(* Template for a certificate *)

From mathcomp Require Import all_ssreflect.
Require Import preliminaries digraph sgraph dom.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Set Bullet Behavior "Strict Subproofs".


Definition n := #.

(**********************************************************************************)
Section Instance.
  Let inst_vert := 'I_n.
  Let inst_adj(u v : nat) :=
    match u, v with
#    | _, _ => false
    end.

  Let inst_rel := [ rel u v : inst_vert | give_sg inst_adj u v ].
  Let inst_sym : symmetric inst_rel. Proof. exact: give_sg_sym. Qed.
  Let inst_irrefl : irreflexive inst_rel. Proof. exact: give_sg_irrefl. Qed.
  Definition inst := SGraph inst_sym inst_irrefl.
End Instance.

Notation "''v' m" := (@Ordinal n m isT) (at level 0, m at level 8, format "''v' m").

(**********************************************************************************)
Section Certificate.
  Let inst_set := [set #].

  Fact inst_set_is_irr : @irredundant inst inst_set.
  Proof.
    apply/irredundantP.
    move=> [v vltn] ; do # try destruct v.
    all : try ( rewrite (bool_irrelevance vltn isT);
                by apply: contraLR => _ ; rewrite /inst_set !inE ).
#    - suff: False by contradiction.
      by move: vltn ; apply/negP.
  Qed.

  Fact IR_lb : IR inst >= #.
  Proof.
    rewrite eq_IR_IR1.
    suff: weight_set (@ones inst) inst_set = #.
    move<- ; apply: IR_max ; exact: inst_set_is_irr.
    rewrite -cardwset1 /inst_set.
    try rewrite -!setUA.
    rewrite !cardsU1 !inE.
    try rewrite negb_or.
    by rewrite cards1.
  Qed.

End Certificate.
#