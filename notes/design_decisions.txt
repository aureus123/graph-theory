Design decisions / talking points

* Graphs
** Why do we represent graphs the way we do?
*** Most proofs treat graphs as monolithic objects (no recursion over node-by-node graph construction)
*** Monolithic graph constructions (quotients, homomorphisms, skeletons, ...) easy to reason about.
*** Combining graphs (as in tree decompositions) is heavyweight and cumbersome.

* Paths
** Paths as structures vs path predicates
*** dedicated xy-path predicates keep track of the endpoints to allow composition
*** path structures allow endpoint conditions to be inferred by type checking
*** path structures reduce the number of assumptions in lemmas/proofs ([p : Path x y] vs. [p : seq G, H: spath p x y])
*** duplicate freeness is a separate assumption, so no upath->spath weakening required.
*** abstracting from the underlying repesentation makes induction difficult.

* Term extraction
** What is the "right" recursion principle to use here?
*** Can avoid proving termination to establish the fixpoint equation and for every correctness property?
*** Is there a (reasonable) functional induction principle?
